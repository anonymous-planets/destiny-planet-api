repositories {
    /** 가장 기본 메이븐 레파지토리 */
    mavenCentral();
    /* spring cloud 최신버전을 위해서 사용 */
    maven { url 'https://repo.spring.io/milestone' }

    /*Eureka dependency*/
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }

    dependencies {
        // spring boot basic
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-tomcat'

        // spring security
        implementation 'org.springframework.boot:spring-boot-starter-security'

        // Firebase
        implementation 'com.google.firebase:firebase-admin:7.1.1'

        // Email
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'
        // Email template로 html을 쓰기 위해서 추가
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'

        // quartz
//    implementation "org.springframework.boot:spring-boot-starter-quartz"

        // websocket
        implementation "org.springframework.boot:spring-boot-starter-websocket"

        // redis
        implementation "org.springframework.boot:spring-boot-starter-data-redis"

        // embedded redis server
        implementation "it.ozimov:embedded-redis:0.7.2"

        // joda-time
        implementation group: 'joda-time', name: 'joda-time', version: '2.10.10'

        // jasypt
        implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.3'

        // webClient
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

        // JWT 관련 의존성
        implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'


        /**
         * Spring Cloud Config
         */
        // Spring Cloud Config Client
        implementation 'org.springframework.cloud:spring-cloud-starter-config'

        /**
         * Spring Cloud Eureka
         */
        // Spring Cloud Eureka Client
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

        /**
         * Spring Cloud Bus
         */
        // Spring Cloud Starter Bus Kafka
        // Kafka로 bus-refresh 메세지를 전송하여 Config Client들에게 모두 변경된 설정 정보가 적용될 수 있도록 한다.
        implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'

        implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

        // Spring Cloud Starter Bus AMQP
        implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

        /**
         * Spring Cloud 기타 사용
         */
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

        // Spring Cloud Starter Actuator
        // health 및 refresh 처리를 위해 필요한 monitor dependency가 있다면, actuator의 refresh나 bus-refresh는 사용하지 않음
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        // Spring Cloud Config Monitor
        // bus-refresh가 가능한 /monitor 엔드포인트를 생성해준다. TODO: 해당 디펜던시 추가하면 에러남
//        implementation 'org.springframework.cloud:spring-cloud-config-monitor'
        // 서비스 간 통신
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'

        // Mapstruct
        implementation 'org.mapstruct:mapstruct:1.5.1.Final'
        implementation 'org.mapstruct:mapstruct-processor:1.5.1.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'

        // json lib
        implementation 'com.google.code.gson:gson:2.9.0'
        implementation 'com.googlecode.json-simple:json-simple:1.1.1'
        implementation group: 'org.json', name: 'json', version: '20210307'
        implementation group: 'org.jsoup', name: 'jsoup', version: '1.13.1'

        implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    }
}
